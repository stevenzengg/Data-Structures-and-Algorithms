from typing import Optional
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        self.carry = 0
        return self.dfs(root)


    def dfs(self, root):
        if not root:
            return None
        root.right = self.dfs(root.right)
        root.val += self.carry
        self.carry = root.val
        root.left = self.dfs(root.left)
        return root


if __name__ == '__main__':
    a = Solution()
    b = TreeNode(4, left = TreeNode(1, TreeNode(), TreeNode(2, right = TreeNode(3))), right = TreeNode(6, TreeNode(5), TreeNode(7, right = TreeNode(8))))
    print(a.convertBST(b))